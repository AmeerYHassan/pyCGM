from mock import patch
import pycgm.axis as axis
import pytest
import numpy as np

rounding_precision = 6
nan = np.nan


class TestUpperBodyAxis:
    """
    This class tests the upper body axis functions in pyCGM.py:
        wrist_axis
    """

    nan_3d = [np.nan, np.nan, np.nan]

    @pytest.mark.parametrize(
        ["elbow_jc", "expected"],
        [
            # Test from running sample data
            (
                [
                    np.array([[0.14362551, -0.9896311, -0.00141034, 633.66707587],
                            [0.68540404, 0.09844474, 0.7214776, 304.95542115],
                            [-0.71385783, -0.10458925, 0.69243634, 1256.07799541],
                            [0.0, 0.0, 0.0, 1.0]]
                    ), np.array([[-0.15439575, -0.98643527, -0.05574424, -129.16952218],
                            [0.71835083, -0.07334106, -0.69180429, 316.8671644],
                            [0.67833181, -0.14685556, 0.71993014, 1258.06440717],
                            [0.0, 0.0, 0.0, 1.0]]
                    ), np.array([[[   1, 0, 0, 793.32814303],
                                [   0, 1, 0, 451.29134788],
                                [   0, 0, 1, 1084.4325513 ],
                                [   0, 0, 0, 1        ]],
                                [[   1, 0, 0, -272.45941897],
                                [   0, 1, 0, 485.80152211],
                                [   0, 0, 1, 1091.36662384],
                                [   0, 0, 0, 1.        ]]])
                ],[
                    np.array([[0.44319425, -0.84255601, -0.30606899, 793.32814303],
                            [0.68540404, 0.09844474, 0.7214776, 451.29134788],
                            [-0.57775441, -0.52953565, 0.62112144, 1084.4325513],
                            [0.0, 0.0, 0.0, 1.0]]
                    ), np.array([[-0.46565384, -0.78949793, -0.39982436, -272.45941897],
                            [0.71835083, -0.07334106, -0.69180429, 485.80152211],
                            [0.51685451, -0.60935549, 0.60128804, 1091.36662384],
                            [0.0, 0.0, 0.0, 1.0]]
                    ),
                ],
            ),
            # Test with zeros for all params
            (
                [np.array([[0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 1.0]]
                    ), np.array([[0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 1.0]]
                    ), np.array([[[1, 0, 0, 0],
                                [0, 1, 0, 0],
                                [0, 0, 1, 0],
                                [0, 0, 0, 1]],
                                [[1, 0, 0, 0],
                                [0, 1, 0, 0],
                                [0, 0, 1, 0],
                                [0, 0, 0, 1]]]),
                ], [np.array([[nan, nan, nan, 0.0],
                            [nan, nan, nan, 0.0],
                            [nan, nan, nan, 0.0],
                            [0.0, 0.0, 0.0, 1.0]]
                    ), np.array([[nan, nan, nan, 0.0],
                            [nan, nan, nan, 0.0],
                            [nan, nan, nan, 0.0],
                            [0.0, 0.0, 0.0, 1.0]]
                    )
                ]
            ),
            # Testing when adding values in elbow_jc[0]
            (
                [np.array([[-9.0, 5.0, -7.0, 9.0],
                            [-9.0, 5.0, -7.0, -5.0],
                            [-9.0, 5.0, -7.0, 7.0],
                            [0.0, 0.0, 0.0, 1.0]]),
                    np.array([[1.0, -6.0, -4.0, -1.0],
                            [1.0, -6.0, -4.0, 6.0],
                            [1.0, -6.0, -4.0, 4.0],
                            [0.0, 0.0, 0.0, 1.0]]),
                    np.array([[[1, 0, 0, 0],
                            [0, 1, 0, 0],
                            [0, 0, 1, 0],
                            [0, 0, 0, 1]],
                            [[1, 0, 0, 0],
                            [0, 1, 0, 0],
                            [0, 0, 1, 0],
                            [0, 0, 0, 1]]])
                ], [np.array([[nan, nan, nan, 0.0],
                            [-0.7228974, 0.40160966, -0.56225353, 0.0],
                            [nan, nan, nan, 0.0],
                            [0.0, 0.0, 0.0, 1.0]]),
                    np.array([[nan, nan, nan, 0.0],
                            [0.13736056, -0.82416338, -0.54944226, 0.0],
                            [nan, nan, nan, 0.0],
                            [0.0, 0.0, 0.0, 1.0]
                        ]
                    )
                ]
            ),
            # Testing when adding values in elbow_jc[1]
            (
                [np.array([[-3.0, -9.0, 6.0, 0.0],
                            [4.0, -5.0, 5.0, 0.0],
                            [-9.0, 7.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 1.0]]), 
                    np.array([[4.0, -1.0, 0.0, 0.0],
                            [3.0, -5.0, 1.0, 0.0],
                            [0.0, -9.0, 7.0, 0.0],
                            [0.0, 0.0, 0.0, 1.0]]),
                    np.array([[[1, 0, 0, 0],
                            [0, 1, 0, 0],
                            [0, 0, 1, 0],
                            [0, 0, 0, 1]],
                            [[1, 0, 0, 0],
                            [0, 1, 0, 0],
                            [0, 0, 1, 0],
                            [0, 0, 0, 1]]])
                ], [np.array([[nan, nan, nan, 0.0],
                            [0.49236596, -0.61545745, 0.61545745, 0.0],
                            [nan, nan, nan, 0.0],
                            [0.0, 0.0, 0.0, 1.0]]), 
                    np.array([[nan, nan, nan, 0.0],
                            [0.50709255, -0.84515425, 0.16903085, 0.0],
                            [nan, nan, nan, 0.0],
                            [0.0, 0.0, 0.0, 1.0]]
                    ),
                ],
            ),
            # Testing when adding values in elbow_jc[2]
            (
                [np.array([[0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 1.0]]), 
                    np.array([[0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 1.0],
                    ]),
                    np.array([[[1, 0, 0, 6],
                            [0, 1, 0, -1],
                            [0, 0, 1, 5],
                            [0, 0, 0, 1]],
                            [[1, 0, 0, 7],
                            [0, 1, 0, 6],
                            [0, 0, 1, 0],
                            [0, 0, 0, 1]]])
                ], [np.array([[nan, nan, nan, 6.0],
                            [nan, nan, nan, -1.0],
                            [nan, nan, nan, 5.0],
                            [0.0, 0.0, 0.0, 1.0]]),
                    np.array([[nan, nan, nan, 7.0],
                            [nan, nan, nan, 6.0],
                            [nan, nan, nan, 0.0],
                            [0.0, 0.0, 0.0, 1.0]]
                    ),
                ],
            ),
            # Testing when adding values in elbow_jc[0] and elbow_jc[1]
            (
                [np.array([[-12.0, -4.0, -1.0, 9.0],
                            [-5.0, 0.0, -2.0, -5.0],
                            [-18.0, 12.0, -7.0, 7.0],
                            [0.0, 0.0, 0.0, 1.0],]),
                    np.array([[5.0, -7.0, -4.0, -1.0],
                            [4.0, -11.0, -3.0, 6.0],
                            [1.0, -15.0, 3.0, 4.0],
                            [0.0, 0.0, 0.0, 1.0]]),
                    np.array([[[1, 0, 0, 0],
                            [0, 1, 0, 0],
                            [0, 0, 1, 0],
                            [0, 0, 0, 1]],
                            [[1, 0, 0, 0],
                            [0, 1, 0, 0],
                            [0, 0, 1, 0],
                            [0, 0, 0, 1]]]),
                ],
                [np.array([[-0.31403715, 0.53386315, 0.78509287, 0.0],
                            [-0.92847669, 0.0, -0.37139068, 0.0],
                            [-0.1982718, -0.84557089, 0.49567949, 0.0],
                            [0.0, 0.0, 0.0, 1.0],]),
                    np.array([[-0.81649658, -0.40824829, 0.40824829, 0.0],
                            [0.33104236, -0.91036648, -0.24828177, 0.0],
                            [0.47301616, -0.06757374, 0.87845859, 0.0],
                            [0.0, 0.0, 0.0, 1.0],
                        ]
                    ),
                ],
            ),
            # Testing when adding values in elbow_jc[0] and elbow_jc[2]
            (
                [np.array([[-9.0, 5.0, -7.0, 9.0],
                            [-9.0, 5.0, -7.0, -5.0],
                            [-9.0, 5.0, -7.0, 7.0],
                            [0.0, 0.0, 0.0, 1.0],]),
                    np.array([[1.0, -6.0, -4.0, -1.0],
                            [1.0, -6.0, -4.0, 6.0],
                            [1.0, -6.0, -4.0, 4.0],
                            [0.0, 0.0, 0.0, 1.0],]),
                    np.array([[[1, 0, 0, 6],
                            [0, 1, 0, -1],
                            [0, 0, 1, 5],
                            [0, 0, 0, 1]],
                            [[1, 0, 0, 7],
                            [0, 1, 0, 6],
                            [0, 0, 1, 0],
                            [0, 0, 0, 1]]]),
                ], [np.array([[-0.64699664, -0.10783277, 0.75482941, 6.0],
                            [-0.7228974, 0.40160966, -0.56225353, -1.0],
                            [-0.24251743, -0.90944036, -0.33779213, 5.0],
                            [0.0, 0.0, 0.0, 1.0]]),
                    np.array([[-0.39649116, 0.46257302, -0.79298232, 7.0],
                            [0.13736056, -0.82416338, -0.54944226, 6.0],
                            [-0.90770416, -0.3267735, 0.26323421, 0.0],
                            [0.0, 0.0, 0.0, 1.0],
                        ]
                    ),
                ],
            ),
            # Testing when adding values in elbow_jc[1] and elbow_jc[2]
            (
                [np.array([[-3.0, -9.0, 6.0, 0.0],
                            [4.0, -5.0, 5.0, 0.0],
                            [-9.0, 7.0, 0.0, 0.0],
                            [0.0, 0.0, 0.0, 1.0]]),
                    np.array([[4.0, -1.0, 0.0, 0.0],
                            [3.0, -5.0, 1.0, 0.0],
                            [0.0, -9.0, 7.0, 0.0],
                            [0.0, 0.0, 0.0, 1.0]]),
                    np.array([[[1, 0, 0, 6],
                            [0, 1, 0, -1],
                            [0, 0, 1, 5],
                            [0, 0, 0, 1]],
                            [[1, 0, 0, 7],
                            [0, 1, 0, 6],
                            [0, 0, 1, 0],
                            [0, 0, 0, 1]]]),
                ], [
                    np.array([[0.58321184, -0.29160592, -0.7581754, 6.0],
                            [0.49236596, -0.61545745, 0.61545745, -1.0],
                            [-0.64609574, -0.73224184, -0.21536525, 5.0],
                            [0.0, 0.0, 0.0, 1.0],]),
                    np.array([[0.11153264, -0.13012141, -0.985205, 7.0],
                            [0.50709255, -0.84515425, 0.16903085, 6.0],
                            [-0.85464473, -0.51844257, -0.02827869, 0.0],
                            [0.0, 0.0, 0.0, 1.0]])
                ],
            ),
            # Testing when adding values in elbow_jc
            (
                [
                    np.array([[-12.0, -4.0, -1.0, 9.0],
                            [-5.0, 0.0, -2.0, -5.0],
                            [-18.0, 12.0, -7.0, 7.0],
                            [0.0, 0.0, 0.0, 1.0]]), 
                    np.array([[5.0, -7.0, -4.0, -1.0],
                            [4.0, -11.0, -3.0, 6.0],
                            [1.0, -15.0, 3.0, 4.0],
                            [0.0, 0.0, 0.0, 1.0]]),
                    np.array([[[1, 0, 0, 6],
                            [0, 1, 0, -1],
                            [0, 0, 1, 5],
                            [0, 0, 0, 1]],
                            [[1, 0, 0, 7],
                            [0, 1, 0, 6],
                            [0, 0, 1, 0],
                            [0, 0, 0, 1]]]),
                ], [
                    np.array([[-0.36514837, 0.18257419, 0.91287093, 6.0],
                            [-0.92847669, 0.0, -0.37139068, -1.0],
                            [-0.06780635, -0.98319208, 0.16951588, 5.0],
                            [0.0, 0.0, 0.0, 1.0]]),
                    np.array([[-0.44574249, 0.08104409, -0.89148499, 7.0],
                            [0.33104236, -0.91036648, -0.24828177, 6.0],
                            [-0.83169982, -0.40578902, 0.37896, 0.0],
                            [0.0, 0.0, 0.0, 1.0]]
                    )
                ],
            ),
            # Testing that when elbow_jc is composed of lists of ints
            (
                [np.array([[-12.0, -4.0, -1.0, 9.0],
                            [-5.0, 0.0, -2.0, -5.0],
                            [-18.0, 12.0, -7.0, 7.0],
                            [0.0, 0.0, 0.0, 1.0]]), 
                np.array([[5.0, -7.0, -4.0, -1.0],
                            [4.0, -11.0, -3.0, 6.0],
                            [1.0, -15.0, 3.0, 4.0],
                            [0.0, 0.0, 0.0, 1.0]]),
                    np.array([[[1, 0, 0, 6],
                            [0, 1, 0, -1],
                            [0, 0, 1, 5],
                            [0, 0, 0, 1]],
                            [[1, 0, 0, 7],
                            [0, 1, 0, 6],
                            [0, 0, 1, 0],
                            [0, 0, 0, 1]]]),
                ],
                [np.array([[-0.36514837, 0.18257419, 0.91287093, 6.0],
                            [-0.92847669, 0.0, -0.37139068, -1.0],
                            [-0.06780635, -0.98319208, 0.16951588, 5.0],
                            [0.0, 0.0, 0.0, 1.0]]),
                np.array([[-0.44574249, 0.08104409, -0.89148499, 7.0],
                            [0.33104236, -0.91036648, -0.24828177, 6.0],
                            [-0.83169982, -0.40578902, 0.37896, 0.0],
                            [0.0, 0.0, 0.0, 1.0]]
                    ),
                ],
            ),
            # Testing that when elbow_jc is composed of numpy arrays of ints
            (
                [np.array([[-12.0, -4.0, -1.0, 9.0],
                            [-5.0, 0.0, -2.0, -5.0],
                            [-18.0, 12.0, -7.0, 7.0],
                            [0.0, 0.0, 0.0, 1.0]], dtype="int"),
                np.array([[5.0, -7.0, -4.0, -1.0],
                            [4.0, -11.0, -3.0, 6.0],
                            [1.0, -15.0, 3.0, 4.0],
                            [0.0, 0.0, 0.0, 1.0]], dtype="int",),
                np.array([[[1, 0, 0, 6],
                            [0, 1, 0, -1],
                            [0, 0, 1, 5],
                            [0, 0, 0, 1]],
                            [[1, 0, 0, 7],
                            [0, 1, 0, 6],
                            [0, 0, 1, 0],
                            [0, 0, 0, 1]]], dtype="int"),
                ], [np.array([[-0.36514837, 0.18257419, 0.91287093, 6.0],
                            [-0.92847669, 0.0, -0.37139068, -1.0],
                            [-0.06780635, -0.98319208, 0.16951588, 5.0],
                            [0.0, 0.0, 0.0, 1.0]]),
                    np.array([[-0.44574249, 0.08104409, -0.89148499, 7.0],
                            [0.33104236, -0.91036648, -0.24828177, 6.0],
                            [-0.83169982, -0.40578902, 0.37896, 0.0],
                            [0.0, 0.0, 0.0, 1.0]]
                    ),
                ],
            ),
            # Testing that when elbow_jc is composed of lists of floats
            (
                [np.array([[-12.0, -4.0, -1.0, 9.0],
                            [-5.0, 0.0, -2.0, -5.0],
                            [-18.0, 12.0, -7.0, 7.0],
                            [0.0, 0.0, 0.0, 1.0]]),
                np.array([[5.0, -7.0, -4.0, -1.0],
                            [4.0, -11.0, -3.0, 6.0],
                            [1.0, -15.0, 3.0, 4.0],
                            [0.0, 0.0, 0.0, 1.0]]),
                np.array([[[1.0, 0.0, 0.0, 6.0],
                            [0.0, 1.0, 0.0, -1.0],
                            [0.0, 0.0, 1.0, 5.0],
                            [0.0, 0.0, 0.0, 1.0]],
                            [[1.0, 0.0, 0.0, 7.0],
                            [0.0, 1.0, 0.0, 6.0],
                            [0.0, 0.0, 1.0, 0.0],
                            [0.0, 0.0, 0.0, 1.0]]]),
                ], [np.array([[-0.36514837, 0.18257419, 0.91287093, 6.0],
                            [-0.92847669, 0.0, -0.37139068, -1.0],
                            [-0.06780635, -0.98319208, 0.16951588, 5.0],
                            [0.0, 0.0, 0.0, 1.0]]), 
                    np.array([[-0.44574249, 0.08104409, -0.89148499, 7.0],
                            [0.33104236, -0.91036648, -0.24828177, 6.0],
                            [-0.83169982, -0.40578902, 0.37896, 0.0],
                            [0.0, 0.0, 0.0, 1.0]]
                    ),
                ],
            ),
            # Testing that when elbow_jc is composed of numpy arrays of floats
            (
                [np.array([[-12.0, -4.0, -1.0, 9.0],
                            [-5.0, 0.0, -2.0, -5.0],
                            [-18.0, 12.0, -7.0, 7.0],
                            [0.0, 0.0, 0.0, 1.0]], dtype="float"), 
                    np.array([[5.0, -7.0, -4.0, -1.0],
                            [4.0, -11.0, -3.0, 6.0],
                            [1.0, -15.0, 3.0, 4.0],
                            [0.0, 0.0, 0.0, 1.0]], dtype="float"),
                    np.array([[[1.0, 0.0, 0.0, 6.0],
                                [0.0, 1.0, 0.0, -1.0],
                                [0.0, 0.0, 1.0, 5.0],
                                [0.0, 0.0, 0.0, 1.0]],
                                [[1.0, 0.0, 0.0, 7.0],
                                [0.0, 1.0, 0.0, 6.0],
                                [0.0, 0.0, 1.0, 0.0],
                                [0.0, 0.0, 0.0, 1.0]]], dtype="float"),
                ], [
                    np.array([[-0.36514837, 0.18257419, 0.91287093, 6.0],
                            [-0.92847669, 0.0, -0.37139068, -1.0],
                            [-0.06780635, -0.98319208, 0.16951588, 5.0],
                            [0.0, 0.0, 0.0, 1.0]]
                    ), np.array([[-0.44574249, 0.08104409, -0.89148499, 7.0],
                            [0.33104236, -0.91036648, -0.24828177, 6.0],
                            [-0.83169982, -0.40578902, 0.37896, 0.0],
                            [0.0, 0.0, 0.0, 1.0],
                        ]
                    ),
                ],
            ),
        ],
    )
    def testWristJointCenter(self, elbow_jc, expected):
        """
        This test provides coverage of the wrist_axis function in pyCGM.py, defined as wrist_axis(elbow_jc)

        This test takes 2 parameters:
        elbow_jc: array containing the x,y,z position of the elbow joint center
        expected: the expected result from calling wrist_axis on elbow_jc

        This test is checking to make sure the wrist joint axis is calculated correctly given the input parameters.

        The REJC and LEJC markers are calculated from the positions in the elbow joint center.
        The RWJC and LWJC markers that are found in the radius are calculated by subtracting the respective
        direction of each elbow axis position from the respective EJC marker.
        The RWJC and LWJC are then used as the origin for the wrist.

        Lastly, it checks that the resulting output is correct when elbow_jc is composed of lists of ints, numpy arrays
        of ints, lists of floats, and numpy arrays of floats.
        """
        result = axis.wrist_axis(elbow_jc)
        np.testing.assert_almost_equal(result[0], expected[0], rounding_precision)
        np.testing.assert_almost_equal(result[1], expected[1], rounding_precision)
