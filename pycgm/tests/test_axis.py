from mock import patch
import pycgm.axis as axis
import pytest
import numpy as np

rounding_precision = 5
nan = np.nan
nan_3d = [np.nan, np.nan, np.nan]


class TestUpperBodyAxis:
    @pytest.mark.parametrize(
        [
            "relb", "lelb", "rwra", "rwrb", "lwra", "lwrb", "shoulderJC", "r_elbow_width", "l_elbow_width", "r_wrist_width", "l_wrist_width", "mm", "mockReturnVal", "expectedMockArgs", "expected",
        ],
        [
            # Test from running sample data
            (
                np.array([658.90338135, 326.07580566, 1285.28515625]), np.array([-156.32162476, 335.2583313, 1287.39916992]),
                np.array([776.51898193, 495.68103027, 1108.38464355]), np.array([830.9072876, 436.75341797, 1119.11901855]),
                np.array([-249.28146362, 525.32977295, 1117.09057617]), np.array([-311.77532959, 477.22512817, 1125.1619873]),

                [np.array([ [1.0, 0.0, 0.0, 429.66951995],
                            [0.0, 1.0, 0.0, 275.06718615],
                            [0.0, 0.0, 1.0, 1453.95397813],
                            [0.0, 0.0, 0.0, 1.0]]),
                 np.array([ [1.0, 0.0, 0.0, 64.51952734],
                            [0.0, 1.0, 0.0, 274.93442161],
                            [0.0, 0.0, 1.0, 1463.6313334],
                            [0.0, 0.0, 0.0, 1.0]])],

                74.0, 74.0, 55.0, 55.0, 7.0,

                [[633.66707588, 304.95542115, 1256.07799541],
                 [-129.16952219, 316.8671644, 1258.06440717]],
                
                [
                    [[429.7839232523795, 96.8248244295684, 904.5644429627703],
                     [429.66951995, 275.06718615, 1453.95397813],
                     [658.90338135, 326.07580566, 1285.28515625],
                     -44.0],
                    [[-409.6146956013004, 530.6280208729519, 1671.682014527917],
                     [64.51952734, 274.93442161, 1463.6313334],
                     [-156.32162476, 335.2583313, 1287.39916992],
                     44.0],
                ],

                [np.array([[0.14362552, -0.9896311, -0.00141034, 633.66707587],
                           [0.68540405, 0.09844474, 0.7214776, 304.95542115],
                           [-0.71385783, -0.10458924, 0.69243634, 1256.07799541],
                           [0.0, 0.0, 0.0, 1.0]]),
                 np.array([[-0.15439575, -0.98643527, -0.05574424, -129.16952218],
                         [0.71835083, -0.07334106, -0.69180429, 316.8671644],
                         [0.6783318, -0.14685556, 0.71993014, 1258.06440717],
                         [0.0, 0.0, 0.0, 1.0]]),
                    np.array([[ [1.0, 0.0, 0.0, 793.32814303],
                                [0.0, 1.0, 0.0, 451.29134788],
                                [0.0, 0.0, 1.0, 1084.4325513],
                                [0.0, 0.0, 0.0, 1.0]],
                            [   [1.0, 0.0, 0.0, -272.45941897],
                                [0.0, 1.0, 0.0, 485.80152211],
                                [0.0, 0.0, 1.0, 1091.36662384],
                                [0.0, 0.0, 0.0, 1.0]]])]
            ),
            # Test with zeros for all params
            (
                np.array([0, 0, 0]), np.array([0, 0, 0]), np.array([0, 0, 0]), np.array([0, 0, 0]), np.array([0, 0, 0]), np.array([0, 0, 0]),
                
                [np.array([[1.0, 0.0, 0.0, 0.0],
                            [0.0, 1.0, 0.0, 0.0],
                            [0.0, 0.0, 1.0, 0.0],
                            [0.0, 0.0, 0.0, 1.0]]),
                np.array([[1.0, 0.0, 0.0, 0.0],
                            [0.0, 1.0, 0.0, 0.0],
                            [0.0, 0.0, 1.0, 0.0],
                            [0.0, 0.0, 0.0, 1.0]])],

                0.0, 0.0, 0.0, 0.0, 7.0,

                [[0, 0, 0], [0, 0, 0]],

                [[nan_3d, [0, 0, 0], [0, 0, 0], -7.0],
                 [nan_3d, [0, 0, 0], [0, 0, 0], 7.0]],

                [np.array([[nan, nan, nan, 0.0],
                           [nan, nan, nan, 0.0],
                           [nan, nan, nan, 0.0],
                           [0.0, 0.0, 0.0, 1.0]]),
                 np.array([[nan, nan, nan, 0.0],
                           [nan, nan, nan, 0.0],
                           [nan, nan, nan, 0.0],
                           [0.0, 0.0, 0.0, 1.0]]),
                 np.array([[[1.0, 0.0, 0.0, nan],
                            [0.0, 1.0, 0.0, nan],
                            [0.0, 0.0, 1.0, nan],
                            [0.0, 0.0, 0.0, 1.0]],
                            [[1.0, 0.0, 0.0, nan],
                             [0.0, 1.0, 0.0, nan],
                             [0.0, 0.0, 1.0, nan],
                             [0.0, 0.0, 0.0, 1.0]],
                ])]
            ),
            # Testing when values are added to frame
            (
                np.array([-9, 1, -4]), np.array([-4, 1, -6]), np.array([2, -3, 9]), np.array([-4, -2, -7]), np.array([-9, 1, -1]), np.array([-3, -4, -9]),
                
                [np.array([[1.0, 0.0, 0.0, 0.0],
                           [0.0, 1.0, 0.0, 0.0],
                           [0.0, 0.0, 1.0, 0.0],
                           [0.0, 0.0, 0.0, 1.0]]),
                 np.array([[1.0, 0.0, 0.0, 0.0],
                           [0.0, 1.0, 0.0, 0.0],
                           [0.0, 0.0, 1.0, 0.0],
                           [0.0, 0.0, 0.0, 1.0]])],

                0.0, 0.0, 0.0, 0.0, 7.0,

                [[0, 0, 0], [0, 0, 0]],

                [[[149.87576359540907, -228.48721408225754, -418.8422716102348], [0, 0, 0], [-9, 1, -4], -7.0,],
                 [[282.73117218166414, -326.69276820761615, -251.76957615571214], [0, 0, 0], [-4, 1, -6], 7.0]],
                
                [np.array([[nan, nan, nan, 0.0],
                           [nan, nan, nan, 0.0],
                           [nan, nan, nan, 0.0],
                           [0.0, 0.0, 0.0, 1.0]]),
                 np.array([[nan, nan, nan, 0.0],
                           [nan, nan, nan, 0.0],
                           [nan, nan, nan, 0.0],
                           [0.0, 0.0, 0.0, 1.0]]),
                 np.array([[[1.0, 0.0, 0.0, 4.7413281],
                            [0.0, 1.0, 0.0, -5.7386979],
                            [0.0, 0.0, 1.0, -1.35541665],
                            [0.0, 0.0, 0.0, 1.0]],
                           [[1.0, 0.0, 0.0, -4.96790631],
                            [0.0, 1.0, 0.0, 4.69256216],
                            [0.0, 0.0, 1.0, -8.09628108],
                            [0.0, 0.0, 0.0, 1.0]],
                ])]
            ),
            # Testing when values are added to shoulderJC
            (
                np.array([0, 0, 0]), np.array([0, 0, 0]), np.array([0, 0, 0]), np.array([0, 0, 0]), np.array([0, 0, 0]), np.array([0, 0, 0]),

                [np.array([[1.0, 0.0, 0.0, -2.0],
                           [0.0, 1.0, 0.0, -8.0],
                           [0.0, 0.0, 1.0, -3.0],
                           [0.0, 0.0, 0.0, 1.0]]),
                 np.array([[1.0, 0.0, 0.0, 5.0],
                           [0.0, 1.0, 0.0, -3.0],
                           [0.0, 0.0, 1.0, 2.0],
                           [0.0, 0.0, 0.0, 1.0]])],

                0.0, 0.0, 0.0, 0.0, 7.0,

                [[0, 0, 0], [0, 0, 0]],

                [[nan_3d, [-2, -8, -3], [0, 0, 0], -7.0],
                 [nan_3d, [5, -3, 2], [0, 0, 0], 7.0]],

                [np.array([[nan, nan, nan, 0.0],
                           [nan, nan, nan, 0.0],
                           [-0.22792115, -0.91168461, -0.34188173, 0.0],
                           [0.0, 0.0, 0.0, 1.0]]),
                 np.array([[nan, nan, nan, 0.0],
                           [nan, nan, nan, 0.0],
                           [0.81110711, -0.48666426, 0.32444284, 0.0],
                           [0.0, 0.0, 0.0, 1.0]]),
                 np.array([[[1.0, 0.0, 0.0, nan],
                            [0.0, 1.0, 0.0, nan],
                            [0.0, 0.0, 1.0, nan],
                            [0.0, 0.0, 0.0, 1.0]],
                           [[1.0, 0.0, 0.0, nan],
                            [0.0, 1.0, 0.0, nan],
                            [0.0, 0.0, 1.0, nan],
                            [0.0, 0.0, 0.0, 1.0]],
                ])],
            ),
            # Testing when values are added to vsk
            (
                np.array([0, 0, 0]), np.array([0, 0, 0]), np.array([0, 0, 0]), np.array([0, 0, 0]), np.array([0, 0, 0]), np.array([0, 0, 0]),

                [np.array([[1.0, 0.0, 0.0, 0.0],
                           [0.0, 1.0, 0.0, 0.0],
                           [0.0, 0.0, 1.0, 0.0],
                           [0.0, 0.0, 0.0, 1.0]]),
                 np.array([[1.0, 0.0, 0.0, 0.0],
                           [0.0, 1.0, 0.0, 0.0],
                           [0.0, 0.0, 1.0, 0.0],
                           [0.0, 0.0, 0.0, 1.0]])],

                -38.0, 6.0, 47.0, -7.0, 7.0,

                [[0, 0, 0], [0, 0, 0]],

                [[nan_3d, [0, 0, 0], [0, 0, 0], 12.0],
                 [nan_3d, [0, 0, 0], [0, 0, 0], 10.0]],

                [np.array([[nan, nan, nan, 0.0],
                           [nan, nan, nan, 0.0],
                           [nan, nan, nan, 0.0],
                           [0.0, 0.0, 0.0, 1.0]]),
                 np.array([[nan, nan, nan, 0.0],
                           [nan, nan, nan, 0.0],
                           [nan, nan, nan, 0.0],
                           [0.0, 0.0, 0.0, 1.0]]),
                 np.array([[[1.0, 0.0, 0.0, nan],
                            [0.0, 1.0, 0.0, nan],
                            [0.0, 0.0, 1.0, nan],
                            [0.0, 0.0, 0.0, 1.0]],
                           [[1.0, 0.0, 0.0, nan],
                            [0.0, 1.0, 0.0, nan],
                            [0.0, 0.0, 1.0, nan],
                            [0.0, 0.0, 0.0, 1.0]],
                ])],
            ),
            # Testing when values are added to mockReturnVal
            (
                np.array([0, 0, 0]), np.array([0, 0, 0]), np.array([0, 0, 0]), np.array([0, 0, 0]), np.array([0, 0, 0]), np.array([0, 0, 0]),

                [np.array([[1.0, 0.0, 0.0, 0.0],
                           [0.0, 1.0, 0.0, 0.0],
                           [0.0, 0.0, 1.0, 0.0],
                           [0.0, 0.0, 0.0, 1.0]]),
                 np.array([[1.0, 0.0, 0.0, 0.0],
                           [0.0, 1.0, 0.0, 0.0],
                           [0.0, 0.0, 1.0, 0.0],
                           [0.0, 0.0, 0.0, 1.0]])],

                0.0, 0.0, 0.0, 0.0, 7.0,

                [[5, 4, -4], [6, 3, 5]],
                
                [[nan_3d, [0, 0, 0], [0, 0, 0], -7.0],
                 [nan_3d, [0, 0, 0], [0, 0, 0], 7.0]],
                
                [np.array([[nan, nan, nan, 5.0],
                           [nan, nan, nan, 4.0],
                           [-0.66226618, -0.52981294, 0.52981294, -4.0],
                           [0.0, 0.0, 0.0, 1.0]]),
                 np.array([[nan, nan, nan, 6.0],
                           [nan, nan, nan, 3.0],
                           [-0.71713717, -0.35856858, -0.5976143, 5.0],
                           [0.0, 0.0, 0.0, 1.0]]),
                 np.array([[[1.0, 0.0, 0.0, nan],
                            [0.0, 1.0, 0.0, nan],
                            [0.0, 0.0, 1.0, nan],
                            [0.0, 0.0, 0.0, 1.0]],
                           [[1.0, 0.0, 0.0, nan],
                            [0.0, 1.0, 0.0, nan],
                            [0.0, 0.0, 1.0, nan],
                            [0.0, 0.0, 0.0, 1.0]],
                ])],
            ),
            # Testing when values are added to frame and thorax
            (
                np.array([-9, 1, -4]), np.array([-4, 1, -6]), np.array([2, -3, 9]), np.array([-4, -2, -7]), np.array([-9, 1, -1]), np.array([-3, -4, -9]),
                
                [np.array([[1.0, 0.0, 0.0, 0.0],
                           [0.0, 1.0, 0.0, 0.0],
                           [0.0, 0.0, 1.0, 0.0],
                           [0.0, 0.0, 0.0, 1.0]]),
                 np.array([[1.0, 0.0, 0.0, 0.0],
                           [0.0, 1.0, 0.0, 0.0],
                           [0.0, 0.0, 1.0, 0.0],
                           [0.0, 0.0, 0.0, 1.0]])],

                0.0, 0.0, 0.0, 0.0, 7.0,

                [[0, 0, 0], [0, 0, 0]],

                [[[149.87576359540907, -228.48721408225754, -418.8422716102348], [0, 0, 0], [-9, 1, -4], -7.0],
                 [[282.73117218166414, -326.69276820761615, -251.76957615571214], [0, 0, 0], [-4, 1, -6], 7.0]],

                [np.array([[nan, nan, nan, 0.0],
                           [nan, nan, nan, 0.0],
                           [nan, nan, nan, 0.0],
                           [0.0, 0.0, 0.0, 1.0]]),
                 np.array([[nan, nan, nan, 0.0],
                           [nan, nan, nan, 0.0],
                           [nan, nan, nan, 0.0],
                           [0.0, 0.0, 0.0, 1.0]]),
                 np.array([[[1.0, 0.0, 0.0, 4.7413281],
                            [0.0, 1.0, 0.0, -5.7386979],
                            [0.0, 0.0, 1.0, -1.35541665],
                            [0.0, 0.0, 0.0, 1.0]],
                           [[1.0, 0.0, 0.0, -4.96790631],
                            [0.0, 1.0, 0.0, 4.69256216],
                            [0.0, 0.0, 1.0, -8.09628108],
                            [0.0, 0.0, 0.0, 1.0]],
                ])],
            ),
            # Testing when values are added to frame, thorax, and shoulderJC
            (
                np.array([-9, 1, -4]), np.array([-4, 1, -6]), np.array([2, -3, 9]), np.array([-4, -2, -7]), np.array([-9, 1, -1]), np.array([-3, -4, -9]),

                [np.array([[1.0, 0.0, 0.0, -2.0],
                           [0.0, 1.0, 0.0, -8.0],
                           [0.0, 0.0, 1.0, -3.0],
                           [0.0, 0.0, 0.0, 1.0]]),
                 np.array([[1.0, 0.0, 0.0, 5.0],
                           [0.0, 1.0, 0.0, -3.0],
                           [0.0, 0.0, 1.0, 2.0],
                           [0.0, 0.0, 0.0, 1.0]])],

                0.0, 0.0, 0.0, 0.0, 7.0,

                [[0, 0, 0], [0, 0, 0]],

                [[[-311.42865408643604, -195.76081109238007, 342.15327877363165], [-2, -8, -3], [-9, 1, -4], -7.0],
                 [[183.9753004933977, -292.7114070209339, -364.32791656553934], [5, -3, 2], [-4, 1, -6], 7.0]],

                [np.array([[-0.96611743, 0.25542798, -0.03706299, 0.0],
                           [0.12111591, 0.32185046, -0.93901183, 0.0],
                           [-0.22792115, -0.91168461, -0.34188173, 0.0],
                           [0.0, 0.0, 0.0, 1.0]]),
                 np.array([[-0.40160402, -0.06011449, 0.91383831, 0.0],
                           [-0.42522873, -0.8715183, -0.24420561, 0.0],
                           [0.81110711, -0.48666426, 0.32444284, 0.0],
                           [0.0, 0.0, 0.0, 1.0]]),
                 np.array([[[1.0, 0.0, 0.0, 4.7413281],
                            [0.0, 1.0, 0.0, -5.7386979],
                            [0.0, 0.0, 1.0, -1.35541665],
                            [0.0, 0.0, 0.0, 1.0]],
                           [[1.0, 0.0, 0.0, -4.96790631],
                            [0.0, 1.0, 0.0, 4.69256216],
                            [0.0, 0.0, 1.0, -8.09628108],
                            [0.0, 0.0, 0.0, 1.0]]
                ])],
            ),
            # Testing when values are added to frame, thorax, shoulderJC, and vsk
            (
                np.array([-9, 1, -4]), np.array([-4, 1, -6]), np.array([2, -3, 9]), np.array([-4, -2, -7]), np.array([-9, 1, -1]), np.array([-3, -4, -9]),
                
                [np.array([[1.0, 0.0, 0.0, -2.0],
                           [0.0, 1.0, 0.0, -8.0],
                           [0.0, 0.0, 1.0, -3.0],
                           [0.0, 0.0, 0.0, 1.0]]),
                 np.array([[1.0, 0.0, 0.0, 5.0],
                           [0.0, 1.0, 0.0, -3.0],
                           [0.0, 0.0, 1.0, 2.0],
                           [0.0, 0.0, 0.0, 1.0]])],

                -38.0, 6.0, 47.0, -7.0, 7.0,

                [[0, 0, 0], [0, 0, 0]],

                [[[-311.42865408643604, -195.76081109238007, 342.15327877363165], [-2, -8, -3], [-9, 1, -4], 12.0],
                 [[183.9753004933977, -292.7114070209339, -364.32791656553934], [5, -3, 2], [-4, 1, -6], 10.0]],

                [np.array([[-0.96858955, 0.17643784, 0.17522547, 0.0],
                           [-0.09942949, 0.37108066, -0.92326211, 0.0],
                           [-0.22792115, -0.91168461, -0.34188173, 0.0],
                           [0.0, 0.0, 0.0, 1.0]]),
                 np.array([[-0.10295277, 0.42724793, 0.89825382, 0.0],
                           [-0.57576557, -0.76198235, 0.2964404, 0.0],
                           [0.81110711, -0.48666426, 0.32444284, 0.0],
                           [0.0, 0.0, 0.0, 1.0]]),
                 np.array([[[1.0, 0.0, 0.0, 24.0157867],
                            [0.0, 1.0, 0.0, -16.61146942],
                            [0.0, 0.0, 1.0, -9.26288685],
                            [0.0, 0.0, 0.0, 1.0]],
                           [[1.0, 0.0, 0.0, -5.48395315],
                            [0.0, 1.0, 0.0, 1.59628108],
                            [0.0, 0.0, 1.0, -6.54814054],
                            [0.0, 0.0, 0.0, 1.0]],
                ])],
            ),
            # Testing when values are added to frame, thorax, shoulderJC, vsk and mockReturnVal
            (
                np.array([-9, 1, -4]), np.array([-4, 1, -6]), np.array([2, -3, 9]), np.array([-4, -2, -7]), np.array([-9, 1, -1]), np.array([-3, -4, -9]),

                [np.array([[1.0, 0.0, 0.0, -2.0],
                           [0.0, 1.0, 0.0, -8.0],
                           [0.0, 0.0, 1.0, -3.0],
                           [0.0, 0.0, 0.0, 1.0]]),
                 np.array([[1.0, 0.0, 0.0, 5.0],
                           [0.0, 1.0, 0.0, -3.0],
                           [0.0, 0.0, 1.0, 2.0],
                           [0.0, 0.0, 0.0, 1.0]])],

                -38.0, 6.0, 47.0, -7.0, 7.0,

                [[5, 4, -4], [6, 3, 5]],

                [[[-311.42865408643604, -195.76081109238007, 342.15327877363165], [-2, -8, -3], [-9, 1, -4], 12.0],
                 [[183.9753004933977, -292.7114070209339, -364.32791656553934], [5, -3, 2], [-4, 1, -6], 10.0]],
                
                [np.array([[-0.84325866, 0.5068194, 0.17902217, 5.0],
                           [-0.19062402, 0.02942885, -0.9812219, 4.0],
                           [-0.50257071, -0.86154979, 0.07179582, -4.0],
                           [0.0, 0.0, 0.0, 1.0]]),
                 np.array([[0.72685699, -0.40020899, 0.55813232, 6.0],
                           [-0.67077551, -0.23921553, 0.70202289, 3.0],
                           [-0.14744196, -0.88465174, -0.44232587, 5.0],
                           [0.0, 0.0, 0.0, 1.0]]),
                 np.array([[[1.0, 0.0, 0.0, 17.14176226],
                            [0.0, 1.0, 0.0, -25.58951561],
                            [0.0, 0.0, 1.0, -7.24625557],
                            [0.0, 0.0, 0.0, 1.0]],
                           [[1.0, 0.0, 0.0, -5.72651293],
                            [0.0, 1.0, 0.0, 1.54742736],
                            [0.0, 0.0, 1.0, -6.6995268],
                            [0.0, 0.0, 0.0, 1.0]],
                ])],
            ),
            # Testing that when frame, thorax, and shoulderJC are list of ints and vsk values are ints
            (
                np.array([-9, 1, -4]), np.array([-4, 1, -6]), np.array([2, -3, 9]), np.array([-4, -2, -7]), np.array([-9, 1, -1]), np.array([-3, -4, -9]),

                [np.array([[1.0, 0.0, 0.0, -2.0],
                           [0.0, 1.0, 0.0, -8.0],
                           [0.0, 0.0, 1.0, -3.0],
                           [0.0, 0.0, 0.0, 1.0]]),
                 np.array([[1.0, 0.0, 0.0, 5.0],
                           [0.0, 1.0, 0.0, -3.0],
                           [0.0, 0.0, 1.0, 2.0],
                           [0.0, 0.0, 0.0, 1.0]])],

                -38.0, 6.0, 47.0, -7.0, 7.0,

                [[5, 4, -4], [6, 3, 5]],

                [[[-311.42865408643604, -195.76081109238007, 342.15327877363165], [-2, -8, -3], [-9, 1, -4], 12.0,],
                 [[183.9753004933977, -292.7114070209339, -364.32791656553934], [5, -3, 2], [-4, 1, -6], 10.0]],

                [np.array([[-0.84325866, 0.5068194, 0.17902217, 5.0],
                           [-0.19062402, 0.02942885, -0.9812219, 4.0],
                           [-0.50257071, -0.86154979, 0.07179582, -4.0],
                           [0.0, 0.0, 0.0, 1.0]]),
                 np.array([[0.72685699, -0.40020899, 0.55813232, 6.0],
                           [-0.67077551, -0.23921553, 0.70202289, 3.0],
                           [-0.14744196, -0.88465174, -0.44232587, 5.0],
                           [0.0, 0.0, 0.0, 1.0]]),
                 np.array([[[1.0, 0.0, 0.0, 17.14176226],
                            [0.0, 1.0, 0.0, -25.58951561],
                            [0.0, 0.0, 1.0, -7.24625557],
                            [0.0, 0.0, 0.0, 1.0]],
                           [[1.0, 0.0, 0.0, -5.72651293],
                            [0.0, 1.0, 0.0, 1.54742736],
                            [0.0, 0.0, 1.0, -6.6995268],
                            [0.0, 0.0, 0.0, 1.0]],
                ])],
            ),
            # Testing that when frame, thorax, and shoulderJC are a numpy array of ints and vsk values are ints
            (
                np.array([-9, 1, -4], dtype="int"), np.array([-4, 1, -6], dtype="int"), 
                np.array([2, -3, 9], dtype="int"), np.array([-4, -2, -7], dtype="int"),
                np.array([-9, 1, -1], dtype="int"), np.array([-3, -4, -9], dtype="int"),
                
                [np.array([[1.0, 0.0, 0.0, -2.0],
                           [0.0, 1.0, 0.0, -8.0],
                           [0.0, 0.0, 1.0, -3.0],
                           [0.0, 0.0, 0.0, 1.0]], dtype="int"),
                 np.array([[1.0, 0.0, 0.0, 5.0],
                           [0.0, 1.0, 0.0, -3.0],
                           [0.0, 0.0, 1.0, 2.0],
                           [0.0, 0.0, 0.0, 1.0]], dtype="int")],

                -38, 6, 47, -7, 7,

                [[5, 4, -4], [6, 3, 5]],

                [[[-311.42865408643604, -195.76081109238007, 342.15327877363165], [-2, -8, -3], [-9, 1, -4], 12.0],
                 [[183.9753004933977, -292.7114070209339, -364.32791656553934], [5, -3, 2], [-4, 1, -6], 10.0]],
                
                [np.array([[-0.84325866, 0.5068194, 0.17902217, 5.0],
                           [-0.19062402, 0.02942885, -0.9812219, 4.0],
                           [-0.50257071, -0.86154979, 0.07179582, -4.0],
                           [0.0, 0.0, 0.0, 1.0]]),
                 np.array([[0.72685699, -0.40020899, 0.55813232, 6.0],
                           [-0.67077551, -0.23921553, 0.70202289, 3.0],
                           [-0.14744196, -0.88465174, -0.44232587, 5.0],
                           [0.0, 0.0, 0.0, 1.0]]),
                 np.array([[[1.0, 0.0, 0.0, 17.14176226],
                            [0.0, 1.0, 0.0, -25.58951561],
                            [0.0, 0.0, 1.0, -7.24625557],
                            [0.0, 0.0, 0.0, 1.0]],
                           [[1.0, 0.0, 0.0, -5.72651293],
                            [0.0, 1.0, 0.0, 1.54742736],
                            [0.0, 0.0, 1.0, -6.6995268],
                            [0.0, 0.0, 0.0, 1.0]],
                ])],
            ),
            # Testing that when frame, thorax, and shoulderJC are a list of floats and vsk values are floats
            (
                [-9.0, 1.0, -4.0], [-4.0, 1.0, -6.0], [2.0, -3.0, 9.0], [-4.0, -2.0, -7.0], [-9.0, 1.0, -1.0], [-3.0, -4.0, -9.0],

                [np.array([[1.0, 0.0, 0.0, -2.0],
                           [0.0, 1.0, 0.0, -8.0],
                           [0.0, 0.0, 1.0, -3.0],
                           [0.0, 0.0, 0.0, 1.0]], dtype="float"),
                 np.array([[1.0, 0.0, 0.0, 5.0],
                           [0.0, 1.0, 0.0, -3.0],
                           [0.0, 0.0, 1.0, 2.0],
                           [0.0, 0.0, 0.0, 1.0]], dtype="float")],

                -38.0, 6.0, 47.0, -7.0, 7.0,

                [[5, 4, -4], [6, 3, 5]],

                [[[-311.42865408643604, -195.76081109238007, 342.15327877363165], [-2, -8, -3], [-9, 1, -4], 12.0],
                 [[183.9753004933977, -292.7114070209339, -364.32791656553934], [5, -3, 2], [-4, 1, -6], 10.0]],

                [np.array([[-0.84325866, 0.5068194, 0.17902217, 5.0],
                           [-0.19062402, 0.02942885, -0.9812219, 4.0],
                           [-0.50257071, -0.86154979, 0.07179582, -4.0],
                           [0.0, 0.0, 0.0, 1.0]]),
                 np.array([[0.72685699, -0.40020899, 0.55813232, 6.0],
                           [-0.67077551, -0.23921553, 0.70202289, 3.0],
                           [-0.14744196, -0.88465174, -0.44232587, 5.0],
                           [0.0, 0.0, 0.0, 1.0]]),
                 np.array([[[1.0, 0.0, 0.0, 17.14176226],
                            [0.0, 1.0, 0.0, -25.58951561],
                            [0.0, 0.0, 1.0, -7.24625557],
                            [0.0, 0.0, 0.0, 1.0]],
                           [[1.0, 0.0, 0.0, -5.72651293],
                            [0.0, 1.0, 0.0, 1.54742736],
                            [0.0, 0.0, 1.0, -6.6995268],
                            [0.0, 0.0, 0.0, 1.0]],
                ])],
            ),
            # Testing that when frame, thorax, and shoulderJC are a numpy array of floats and vsk values are floats
            (
                np.array([-9.0, 1.0, -4.0], dtype="float"), np.array([-4.0, 1.0, -6.0], dtype="float"), np.array([2.0, -3.0, 9.0], dtype="float"), 
                np.array([-4.0, -2.0, -7.0], dtype="float"), np.array([-9.0, 1.0, -1.0], dtype="float"), np.array([-3.0, -4.0, -9.0], dtype="float"),
                
                [np.array([[1.0, 0.0, 0.0, -2.0],
                           [0.0, 1.0, 0.0, -8.0],
                           [0.0, 0.0, 1.0, -3.0],
                           [0.0, 0.0, 0.0, 1.0]], dtype="float"),
                 np.array([[1.0, 0.0, 0.0, 5.0],
                           [0.0, 1.0, 0.0, -3.0],
                           [0.0, 0.0, 1.0, 2.0],
                           [0.0, 0.0, 0.0, 1.0]], dtype="float")],

                -38.0, 6.0, 47.0, -7.0, 7.0,

                [[5, 4, -4], [6, 3, 5]],

                [[[-311.42865408643604, -195.76081109238007, 342.15327877363165], [-2, -8, -3], [-9, 1, -4], 12.0],
                 [[183.9753004933977, -292.7114070209339, -364.32791656553934], [5, -3, 2], [-4, 1, -6], 10.0]],
                
                [np.array([[-0.84325866, 0.5068194, 0.17902217, 5.0],
                           [-0.19062402, 0.02942885, -0.9812219, 4.0],
                           [-0.50257071, -0.86154979, 0.07179582, -4.0],
                           [0.0, 0.0, 0.0, 1.0]]),
                 np.array([[0.72685699, -0.40020899, 0.55813232, 6.0],
                           [-0.67077551, -0.23921553, 0.70202289, 3.0],
                           [-0.14744196, -0.88465174, -0.44232587, 5.0],
                           [0.0, 0.0, 0.0, 1.0]]),
                 np.array([[[1.0, 0.0, 0.0, 17.14176226],
                            [0.0, 1.0, 0.0, -25.58951561],
                            [0.0, 0.0, 1.0, -7.24625557],
                            [0.0, 0.0, 0.0, 1.0]],
                           [[1.0, 0.0, 0.0, -5.72651293],
                            [0.0, 1.0, 0.0, 1.54742736],
                            [0.0, 0.0, 1.0, -6.6995268],
                            [0.0, 0.0, 0.0, 1.0]]]),
        ])],
    )
    def test_elbow_axis(
        self, relb, lelb, rwra, rwrb, lwra, lwrb, shoulderJC, r_elbow_width, l_elbow_width, r_wrist_width, l_wrist_width, mm, mockReturnVal, expectedMockArgs, expected,
    ):
        """
        This test provides coverage of the elbow_axis function in pyCGM.py, defined as elbow_axis(relb, lelb, rwra, rwrb, lwra, lwrb, shoulderJC, r_elbow_width, l_elbow_width, r_wrist_width, l_wrist_width)

        This test takes 7 parameters:
        frame: dictionary of marker lists
        thorax: array containing several x,y,z markers for the thorax
        shoulderJC: array containing x,y,z position of the shoulder joint center
        vsk: dictionary containing subject measurements from a VSK file
        mockReturnVal: the value to be returned by the mock for find_joint_center
        expectedMockArgs: the expected arguments used to call the mocked function, find_joint_center
        expected: the expected result from calling elbow_axis on frame, thorax, shoulderJC, and vsk

        This test is checking to make sure the elbow joint axis is calculated correctly given the input parameters.
        This tests mocks find_joint_center to make sure the correct parameters are being passed into it given the parameters
        passed into findshoulderJC, and also ensure that elbow_axis returns the correct value considering
        the return value of find_joint_center, mockReturnVal.

        Lastly, it checks that the resulting output is correct when frame and shoulderJC are a list of ints, a
        numpy array of ints, a list of floats, and a numpy array of floats, vsk values are either an int or a float,
        and thorax values are either an int or a float. Thorax cannot be a numpy array due to it not being shaped like
        a multi-dimensional array.
        """
        with patch.object(
            axis, "find_joint_center", side_effect=mockReturnVal
        ) as mock_find_joint_center:
            result = axis.elbow_axis(
                relb, lelb, rwra, rwrb, lwra, lwrb, shoulderJC, r_elbow_width, l_elbow_width, r_wrist_width, l_wrist_width, mm
            )

        # Asserting that there were only 2 calls to find_joint_center
        np.testing.assert_equal(mock_find_joint_center.call_count, 2)

        # Asserting that the correct params were sent in the 1st (right) call to find_joint_center
        np.testing.assert_almost_equal( expectedMockArgs[0][0], mock_find_joint_center.call_args_list[0][0][0], rounding_precision)
        np.testing.assert_almost_equal( expectedMockArgs[0][1], mock_find_joint_center.call_args_list[0][0][1], rounding_precision)
        np.testing.assert_almost_equal( expectedMockArgs[0][2], mock_find_joint_center.call_args_list[0][0][2], rounding_precision)
        np.testing.assert_almost_equal( expectedMockArgs[0][3], mock_find_joint_center.call_args_list[0][0][3], rounding_precision)

        # Asserting that the correct params were sent in the 2nd (left) call to find_joint_center
        np.testing.assert_almost_equal( expectedMockArgs[1][0], mock_find_joint_center.call_args_list[1][0][0], rounding_precision)
        np.testing.assert_almost_equal( expectedMockArgs[1][1], mock_find_joint_center.call_args_list[1][0][1], rounding_precision)
        np.testing.assert_almost_equal( expectedMockArgs[1][2], mock_find_joint_center.call_args_list[1][0][2], rounding_precision)
        np.testing.assert_almost_equal( expectedMockArgs[1][3], mock_find_joint_center.call_args_list[1][0][3], rounding_precision)

        # Asserting that findShoulderJC returned the correct result given the return value given by mocked find_joint_center
        np.testing.assert_almost_equal(result[0], expected[0], rounding_precision)
        np.testing.assert_almost_equal(result[1], expected[1], rounding_precision)
        np.testing.assert_almost_equal(result[2], expected[2], rounding_precision)
